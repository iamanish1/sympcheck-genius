
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { AlertCircle, CheckCircle, AlertTriangle } from "lucide-react";
import { Separator } from "@/components/ui/separator";

interface ReportAnalysisResultProps {
  analysisResult: any;
}

const ReportAnalysisResult: React.FC<ReportAnalysisResultProps> = ({ analysisResult }) => {
  if (!analysisResult) {
    return (
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>No results available</AlertTitle>
        <AlertDescription>
          The analysis results are not available or are still processing.
        </AlertDescription>
      </Alert>
    );
  }

  if (analysisResult.type === 'image') {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Image Analysis Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700">{analysisResult.summary}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Detailed Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {analysisResult.findings.map((finding: any, index: number) => (
                <div key={index} className="p-4 border rounded-lg bg-gray-50">
                  <div className="flex items-center gap-2 mb-2">
                    {finding.type === 'observation' ? (
                      <AlertTriangle className="h-5 w-5 text-amber-500" />
                    ) : (
                      <CheckCircle className="h-5 w-5 text-primary" />
                    )}
                    <h4 className="font-medium capitalize">{finding.type}</h4>
                    
                    {finding.confidence && (
                      <Badge variant={finding.confidence > 0.7 ? "default" : "outline"} className="ml-auto">
                        {Math.round(finding.confidence * 100)}% confidence
                      </Badge>
                    )}
                  </div>
                  
                  {finding.location && (
                    <p className="text-sm text-gray-600 mb-1">
                      <span className="font-medium">Location:</span> {finding.location}
                    </p>
                  )}
                  
                  <p className="text-gray-700">{finding.description}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Medical Disclaimer</AlertTitle>
          <AlertDescription>
            This analysis is generated by AI and should not replace professional medical advice. 
            Please consult with a healthcare professional for proper diagnosis and treatment.
          </AlertDescription>
        </Alert>
      </div>
    );
  } else {
    // Document analysis results
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Document Analysis Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700">{analysisResult.summary}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Abnormal Values</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th className="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Test</th>
                    <th className="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                    <th className="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Normal Range</th>
                    <th className="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Interpretation</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {analysisResult.abnormalValues.map((value: any, index: number) => (
                    <tr key={index}>
                      <td className="px-4 py-3 text-sm font-medium text-gray-900">{value.test}</td>
                      <td className="px-4 py-3 text-sm text-gray-900">{value.value}</td>
                      <td className="px-4 py-3 text-sm text-gray-500">{value.normalRange}</td>
                      <td className="px-4 py-3 text-sm">
                        <Badge 
                          variant={value.interpretation.includes('Below') ? "destructive" : 
                                 value.interpretation.includes('Above') ? "destructive" : 
                                 "outline"}
                        >
                          {value.interpretation}
                        </Badge>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>

        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Medical Disclaimer</AlertTitle>
          <AlertDescription>
            This analysis is generated by AI and should not replace professional medical advice. 
            Please consult with a healthcare professional for proper interpretation of your lab results.
          </AlertDescription>
        </Alert>
      </div>
    );
  }
};

export default ReportAnalysisResult;
